---
title: "An iterative approach to streamlining your analytical workflows using functions and for loops"
author: Sam Csik
date: April 14, 2023
format: 
  html:
    theme: minty
    toc: true
    toc-location: left
editor_options: 
  chunk_output_type: console
---


## Introduction

Some text about the benefits of using functions & for loops -- jumpinng into the deep end is challenging for anyone. important to make this an iterative process

## `r fontawesome::fa("table", fill = "#5A5A5A", a11y = "sem")` About the Data

Let's say I want to look at ocean temperature data from three coastal sites within the Santa Barbara Coastal (SBC) LTER: Alegria Reef, Mohawk Reef, Carpenteria Reef. Data are collected by moored instrumentation (CTD & ADCP) at each site. Raw data are available for download on the EDI Data Portal:

  1. Alegria Reef: <https://portal.edirepository.org/nis/mapbrowse?packageid=knb-lter-sbc.2008.14>
  2. Mohawk Reef: <https://doi.org/10.6073/pasta/cbe43646b801bf6ee5231c301ea23f51>
  3. Carpenteria Reef: <https://portal.edirepository.org/nis/mapbrowse?packageid=knb-lter-sbc.2004.26>

## **Iteration 1:** Clean and plot *one* data set 

I (personally) find it absolutely critical to figure out how to clean/wrangle/tidy one data set on its own before I even begin thinking about writing a function. The data set I'm using contains *lots* of variables that I'm not interested in. Additionally....

### **i.** Load libraries

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
library(tidyverse)
library(chron)
library(naniar)
library(ggridges)
```


### **ii.** Import raw data 

Either download from the [Environmental Data Portal](https://portal.edirepository.org/nis/home.jsp) (EDI) directly: 

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
# ale <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-sbc.2008.14&entityid=15c25abf9bb72e2017301fa4e5b2e0d4")
# mko <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-sbc.2007.16&entityid=02629ecc08a536972dec021f662428aa")
# car <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-sbc.2004.26&entityid=1d7769e33145ba4f04aa0b0a3f7d4a76")
```


OR download files (they are large!) from [Google Drive](https://drive.google.com/drive/folders/1S2IY-qo29CU9ahRj_QNfFLfrh7DnT3CG?usp=share_link) and save to `data/raw_data/` (be sure to unzip them!):

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
alegria <- read_csv(here::here("data", "raw_data", "alegria_mooring_ale_20210617.csv"))
mohawk <- read_csv(here::here("data", "raw_data", "mohawk_mooring_mko_20220330.csv"))
carpenteria <- read_csv(here::here("data", "raw_data", "carpinteria_mooring_car_20220330.csv"))
```


### **iii.** Clean data 

Below, we select only the necessary columns (there are *far* too many (87) in the raw data), add a column for site name (the only way to tell which site the data were collected from is by looking at the file name), formatting dates/times, and replacing missing value codes with *`NA`*.

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
alegria_clean <- alegria |> 
  
  # keep only necessary columns & filter for years 2005-2020
  select("year", "month", "day", "decimal_time", "Temp_top", "Temp_mid", "Temp_bot") |>
  filter(year %in% c(2005:2020)) |> 
  
  # add column with site name
  mutate(site = rep("Alegria Reef")) |> 
  
  # create date time column
  unite(date, year, month, day, sep = "-", remove = FALSE) |> 
  mutate(time = times(as.numeric(decimal_time))) |> 
  unite(date_time, date, time, sep = " ", remove = TRUE) |> 
  
  # coerce data types
  mutate(date_time = as.POSIXct(date_time, "%Y-%m-%d %H:%M:%S", tz = "GMT"),
         year = as.factor(year),
         month = as.factor(month),
         day = as.numeric(day)) |>
  
  # add month name
  mutate(month_name = as.factor(month.name[month])) |>
  
  # replace 9999s with NAs (will throw warning if var isn't present, but still execute)
  replace_with_na(replace = list(Temp_bot = 9999, Temp_top = 9999, Temp_mid = 9999)) |> 
  
  # select/reorder desired columns
  select("site", "date_time", "year", "month", "day", "month_name", "Temp_bot", "Temp_mid", "Temp_top")

```


### **iv.** Plot the data

Here, we create a ridgeline plot (using the `{ggridges}` package) showing aggregate bottom temperatures (2005-2020), by month, at Alegria reef.

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
alegria_plot <- alegria_clean |> 
  
  group_by(month_name) |> 
  
  ggplot(aes(x = Temp_bot, y = month_name, fill = after_stat(x))) +
  geom_density_ridges_gradient(rel_min_height = 0.01, scale = 3) + 
  scale_x_continuous(breaks = c(9, 12, 15, 18, 21)) +
  scale_y_discrete(limits = rev(month.name)) + 
  scale_fill_gradientn(colors = c("#2C5374","#778798", "#ADD8E6", "#EF8080", "#8B3A3A"), name = "Temp. (°C)") +
  labs(x = "Bottom Temperature (°C)",
       title = "Bottom Temperatures at Alegria Reef, Santa Barbara, CA",
       subtitle = "Temperatures (°C) aggregated by month from 2005 - 2020") +
  ggridges::theme_ridges(font_size = 13, grid = TRUE) +
  theme(
    axis.title.y = element_blank()
  )

alegria_plot
```


If we were to continue with this workflow (which is absolutely a valid way that gets the job done!), we would need to repeat the above code two more times (for both the `mohawk` and `carpenteria` data frames) -- this gets lengthy rather quickly, requires lots of copying/pasting, and is prone to errors (e.g. forgetting to update a data frame name, typos, etc.). If you'd like to check out the code for the `mohawk` and `carpenteria` data sets, unfold the code chunk below:


```{r}
#| eval: true
#| echo: true
#| code-fold: true
#| layout-ncol: 2
#| message: false
#| warning: false

#..........................Mohawk Reef...........................

# clean
mohawk_clean <- mohawk |> 
  select("year", "month", "day", "decimal_time", "Temp_top", "Temp_mid", "Temp_bot") |>
  filter(year %in% c(2005:2020)) |> 
  mutate(site = rep("Mohawk Reef")) |> 
  unite(date, year, month, day, sep = "-", remove = FALSE) |> 
  mutate(time = times(as.numeric(decimal_time))) |> 
  unite(date_time, date, time, sep = " ", remove = TRUE) |> 
  mutate(date_time = as.POSIXct(date_time, "%Y-%m-%d %H:%M:%S", tz = "GMT"),
         year = as.factor(year),
         month = as.factor(month),
         day = as.numeric(day)) |>
  mutate(month_name = as.factor(month.name[month])) |>
  replace_with_na(replace = list(Temp_bot = 9999, Temp_top = 9999, Temp_mid = 9999)) |> 
  select("site", "date_time", "year", "month", "day", "month_name", "Temp_bot", "Temp_mid", "Temp_top")

# plot
mohawk_plot <- mohawk_clean |> 
  group_by(month_name) |> 
  ggplot(aes(x = Temp_bot, y = month_name, fill = after_stat(x))) +
  geom_density_ridges_gradient(rel_min_height = 0.01, scale = 3) + 
  scale_x_continuous(breaks = c(9, 12, 15, 18, 21)) +
  scale_y_discrete(limits = rev(month.name)) + 
  scale_fill_gradientn(colors = c("#2C5374","#778798", "#ADD8E6", "#EF8080", "#8B3A3A"), name = "Temp. (°C)") +
  labs(x = "Bottom Temperature (°C)",
       title = "Bottom Temperatures at Mohawk Reef, Santa Barbara, CA",
       subtitle = "Temperatures (°C) aggregated by month from 2005 - 2020") +
  ggridges::theme_ridges(font_size = 13, grid = TRUE) +
  theme(
    axis.title.y = element_blank()
  )

mohawk_plot

#........................Carpenteria Reef........................

# clean
carpenteria_clean <- carpenteria |> 
  select("year", "month", "day", "decimal_time", "Temp_top", "Temp_mid", "Temp_bot") |>
  filter(year %in% c(2005:2020)) |> 
  mutate(site = rep("Carpenteria Reef")) |> 
  unite(date, year, month, day, sep = "-", remove = FALSE) |> 
  mutate(time = times(as.numeric(decimal_time))) |> 
  unite(date_time, date, time, sep = " ", remove = TRUE) |> 
  mutate(date_time = as.POSIXct(date_time, "%Y-%m-%d %H:%M:%S", tz = "GMT"),
         year = as.factor(year),
         month = as.factor(month),
         day = as.numeric(day)) |>
  mutate(month_name = as.factor(month.name[month])) |>
  replace_with_na(replace = list(Temp_bot = 9999, Temp_top = 9999, Temp_mid = 9999)) |> 
  select("site", "date_time", "year", "month", "day", "month_name", "Temp_bot", "Temp_mid", "Temp_top")

# plot
carpenteria_plot <- carpenteria_clean |> 
  group_by(month_name) |> 
  ggplot(aes(x = Temp_bot, y = month_name, fill = after_stat(x))) +
  geom_density_ridges_gradient(rel_min_height = 0.01, scale = 3) + 
  scale_x_continuous(breaks = c(9, 12, 15, 18, 21)) +
  scale_y_discrete(limits = rev(month.name)) + 
  scale_fill_gradientn(colors = c("#2C5374","#778798", "#ADD8E6", "#EF8080", "#8B3A3A"), name = "Temp. (°C)") +
  labs(x = "Bottom Temperature (°C)",
       title = "Bottom Temperatures at Carpenteria Reef, Santa Barbara, CA",
       subtitle = "Temperatures (°C) aggregated by month from 2005 - 2020") +
  ggridges::theme_ridges(font_size = 13, grid = TRUE) +
  theme(
    axis.title.y = element_blank()
  )

carpenteria_plot
```


## **Iteration 2:** Write functions to clean & plot your data

It's helpful to first identify which parts of the cleaning code need to be generalized/made "flexible" so that any of our three data frames can be passed to it for cleaning. For us, that's:

1.  the name of the raw data frame
2.  the site name character string that's repeated for the length of the added `site` column


```{r}
#| eval: false
#| echo: true
#| message: false
#| warning: false
alegria_clean <- alegria |> # 1) the name of the raw df (here, 'alegria') AND 1) the name of the object my clean data will be saved to (here, `alegria_clean`)
  select("year", "month", "day", "decimal_time", "Temp_top", "Temp_mid", "Temp_bot") |>
  filter(year %in% c(2005:2020)) |> 
  mutate(site = rep("Alegria Reef")) |> # 2) the site name character string that's repeated across the `site` column
  unite(date, year, month, day, sep = "-", remove = FALSE) |> 
  mutate(time = times(as.numeric(decimal_time))) |> 
  unite(date_time, date, time, sep = " ", remove = TRUE) |> 
  mutate(date_time = as.POSIXct(date_time, "%Y-%m-%d %H:%M:%S", tz = "GMT"),
         year = as.factor(year),
         month = as.factor(month),
         day = as.numeric(day)) |>
  mutate(month_name = as.factor(month.name[month])) |>
  replace_with_na(replace = list(Temp_bot = 9999, Temp_top = 9999, Temp_mid = 9999)) |> 
  select("site", "date_time", "year", "month", "day", "month_name", "Temp_bot", "Temp_mid", "Temp_top")
```


### **i.** Write a function to **clean** data sets

Now we can start to build out our function. We'll start by creating a super basic function, then build in more complexity. I encourage you to test out your function after each version to ensure that it works as you intend it to.

::: panel-tabset

## Version 1 

To start, let's create the skeleton of our function, which we'll call `clean_ocean_temps()`:

```{r}
#| eval: false
#| echo: true
#| message: false
#| warning: false
clean_ocean_temps <- function(){
  
}
```


Now, let's copy and paste our cleaning code for Alegria Reef data (from **Iteration 1**, above) into the body of the function (i.e. within the curly brackets, `{}`).

```{r}
#| eval: false
#| echo: true
#| message: false
#| warning: false
clean_ocean_temps <- function(){
 
  alegria_clean <- alegria |> 
    select("year", "month", "day", "decimal_time", "Temp_top", "Temp_mid", "Temp_bot") |>
    filter(year %in% c(2005:2020)) |> 
    mutate(site = rep("Alegria Reef")) |> 
    unite(date, year, month, day, sep = "-", remove = FALSE) |> 
    mutate(time = times(as.numeric(decimal_time))) |> 
    unite(date_time, date, time, sep = " ", remove = TRUE) |> 
    mutate(date_time = as.POSIXct(date_time, "%Y-%m-%d %H:%M:%S", tz = "GMT"),
          year = as.factor(year),
          month = as.factor(month),
          day = as.numeric(day)) |>
    mutate(month_name = as.factor(month.name[month])) |>
    replace_with_na(replace = list(Temp_bot = 9999, Temp_top = 9999, Temp_mid = 9999)) |> 
    select("site", "date_time", "year", "month", "day", "month_name", "Temp_bot", "Temp_mid", "Temp_top")
  
}
```


Next, we want the ability to provide our function with any three of our data sets for processing. We'll do this following these steps: 

1.  create an input (aka **argument**) called `raw_data` inside `function()` (NOTE: you can name your argument however you'd like, but preferably something short and descriptive) 
2.  substitute our new `raw_data` argument for the hard-coded data frame name (e.g. `alegria` in the code above) within our cleaning pipeline
3.  update the name of the object we save our clean data to (currently `alegria_clean`) to something a bit more generalized, like `temps_clean` and `return()` our clean data frame object at the end

Recall that part of our cleaning pipeline includes adding a column called `site`, with repeating values that are the site name. For now, I'll just put some placeholder text (*___ Reef*) and we'll figure out how to make that text match up with the data in the next versions of our function. 

```{r}
#| eval: false
#| echo: true
#| message: false
#| warning: false
clean_ocean_temps <- function(raw_data){ # step 1
  
  temps_clean <- raw_data |> # steps 2 & 3.1
    select("year", "month", "day", "decimal_time", "Temp_top", "Temp_mid", "Temp_bot") |>
    filter(year %in% c(2005:2020)) |> 
    mutate(site = rep("___ Reef")) |> # added placeholder text here
    unite(date, year, month, day, sep = "-", remove = FALSE) |> 
    mutate(time = times(as.numeric(decimal_time))) |> 
    unite(date_time, date, time, sep = " ", remove = TRUE) |> 
    mutate(date_time = as.POSIXct(date_time, "%Y-%m-%d %H:%M:%S", tz = "GMT"),
          year = as.factor(year),
          month = as.factor(month),
          day = as.numeric(day)) |>
    mutate(month_name = as.factor(month.name[month])) |>
    replace_with_na(replace = list(Temp_bot = 9999, Temp_top = 9999, Temp_mid = 9999)) |> 
    select("site", "date_time", "year", "month", "day", "month_name", "Temp_bot", "Temp_mid", "Temp_top")
  
  return(temps_clean) # step 3.2
}
```


Lastly, let's make sure our function works. Run your function so that it's saved to your global environment, then use it on your raw data sets:

```{r}
#| eval: false
#| echo: true
#| message: false
#| warning: false
alegria_clean <- clean_ocean_temps(raw_data = alegria)
mohawk_clean <- clean_ocean_temps(raw_data = mohawk)
carpenteria_clean <- clean_ocean_temps(raw_data = carpenteria)
```


## Version 2

Before we get too far, it's probably a good idea to make sure any required dependencies are loaded with our function. A good way to check that your function works as-is is to restart R, reload your data and your function, then use your function:


```{r}
#| eval: false
#| echo: true
#| message: false
#| warning: false
#......load in data using only the required packages (readr).....
alegria <- readr::read_csv(here::here("data", "raw_data", "alegria_mooring_ale_20210617.csv"))
mohawk <- readr::read_csv(here::here("data", "raw_data", "mohawk_mooring_mko_20220330.csv"))
carpenteria <- readr::read_csv(here::here("data", "raw_data", "carpinteria_mooring_car_20220330.csv"))

#......................re-load your function.....................
clean_ocean_temps <- function(raw_data){ 
  
  temps_clean <- raw_data |>
    select("year", "month", "day", "decimal_time", "Temp_top", "Temp_mid", "Temp_bot") |>
    filter(year %in% c(2005:2020)) |> 
    mutate(site = rep("___ Reef")) |>
    unite(date, year, month, day, sep = "-", remove = FALSE) |> 
    mutate(time = times(as.numeric(decimal_time))) |> 
    unite(date_time, date, time, sep = " ", remove = TRUE) |> 
    mutate(date_time = as.POSIXct(date_time, "%Y-%m-%d %H:%M:%S", tz = "GMT"),
          year = as.factor(year),
          month = as.factor(month),
          day = as.numeric(day)) |>
    mutate(month_name = as.factor(month.name[month])) |>
    replace_with_na(replace = list(Temp_bot = 9999, Temp_top = 9999, Temp_mid = 9999)) |> 
    select("site", "date_time", "year", "month", "day", "month_name", "Temp_bot", "Temp_mid", "Temp_top")
  
  return(temps_clean) 
}

#....................try using your function.....................
alegria_clean <- clean_ocean_temps(raw_data = alegria)
mohawk_clean <- clean_ocean_temps(raw_data = mohawk)
carpenteria_clean <- clean_ocean_temps(raw_data = carpenteria)
```


**Does it work?**

If you're following along here, you most likely got an error message that says something like `...could not find function "select"`. We use lots of existing functions within `clean_ocean_temps()` that are called from external packages: `{dplyr}`, `{chron}`, `{naniar}`. It's best not to assume that a user (including yourself) will have already installed and loaded those packages prior to trying to use `clean_ocean_temps()`. To fix this, we can call `library()` inside our function to load all required packages before executing our cleaning code. If a user tries to use `clean_ocean_names()` but doesn't have a required package(s) already installed, it will return an error (e.g. `Error in library(x): there is no package called 'x'`).


```{r}
#| eval: false
#| echo: true
#| message: false
#| warning: false
clean_ocean_temps <- function(raw_data){ 
  
  library(dplyr)
  library(tidyr)
  library(chron)
  library(naniar)
  
  temps_clean <- raw_data |>
    select("year", "month", "day", "decimal_time", "Temp_top", "Temp_mid", "Temp_bot") |>
    filter(year %in% c(2005:2020)) |> 
    mutate(site = rep("___ Reef")) |>
    unite(date, year, month, day, sep = "-", remove = FALSE) |> 
    mutate(time = times(as.numeric(decimal_time))) |> 
    unite(date_time, date, time, sep = " ", remove = TRUE) |> 
    mutate(date_time = as.POSIXct(date_time, "%Y-%m-%d %H:%M:%S", tz = "GMT"),
          year = as.factor(year),
          month = as.factor(month),
          day = as.numeric(day)) |>
    mutate(month_name = as.factor(month.name[month])) |>
    replace_with_na(replace = list(Temp_bot = 9999, Temp_top = 9999, Temp_mid = 9999)) |> 
    select("site", "date_time", "year", "month", "day", "month_name", "Temp_bot", "Temp_mid", "Temp_top")
  
  return(temps_clean) 
}
```

```{r}
alegria_clean <- clean_ocean_temps(raw_data = alegria)
mohawk_clean <- clean_ocean_temps(raw_data = mohawk)
carpenteria_clean <- clean_ocean_temps(raw_data = carpenteria)
```


## Version 3
## Version 4
## Version 5

:::

### **ii:** Write a function to **plot** data sets

### **iii:** Use your functions to **clean and plot** your data sets




