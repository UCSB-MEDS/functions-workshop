---
format: html
---

By now, you may have heard instructors or online resources quote the saying, "If you've copied a block of code more than twice, you should probably consider writing a function." 

As your analyses get longer and more complex, the chances that you'll benefit from writing functions will also increase -- many times, this is to minimize the amount of code you need to copy/paste, but writing functions can also help to make your code:

-  more navigable (e.g. by partitioning your code and functions into separate files)
-  more readable (e.g. creating human-readable function names that tell a user exactly what to expect)
-  less prone to errors (e.g. less copying/pasting large code chunks means less opportunity to introduce bugs)

Iteration (i.e. performing the same operation on multiple inputs, e.g. multiple data sets, columns, etc.) is another tool for reducing duplication -- for loops are one approach for performing iterative tasks. Together, both functions and for loops provide a powerful means to streamlining your analytical pipelines.

*However*, whether you're a new learner or seasoned programmer, it can sometimes feel overwhelming to know exactly where to start -- especially when you have an end goal that builds additional complexity/flexibility into your functions and for loops. Taking an iterative approach to building out your code can help make this process clearer, less daunting, and more fun. 

This document walks through *my* own iterative process for writing a couple functions and for loops to clean and visualize multiple, similar data sets. The way I've written this code is certainly not the *only* way (and likely not even the most optimized way), but I hope that by stepping through how I slowly build out my functions to be more flexible and user-friendly, it might help demonstrate an iterative workflow that I find particularly effective.