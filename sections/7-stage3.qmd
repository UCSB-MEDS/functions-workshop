---
format: html
---

# **`r fontawesome::fa("rocket", fill = "#5A5A5A", a11y = "sem")` Stage 3:** Write for loops to read in, clean, and plot all your data

Our functions certainly get the job done, and we might decide to stop there. But you might imagine a situation where we actually have dozens, or even hundreds of files to process/plot -- writing a for loop to iterate over those data sets may save us time/effort/potential coding errors.

In Stage 3, we'll write three different for loops -- one to read in our data, one to clean our data, and one to plot our data (though you can certainly write a single on to do all three steps!).

::: {.callout-note}
I’ll be writing the following code in a script called, `forloops_pipeline.R`, which I’ll save to my repo’s root directory. I'll start off my script by importing all required packages and sourcing both my functions:

```{r}
#| eval: false
#| echo: true
#| message: false
#| warning: false
# forloops_pipeline.R #

#..........................load packages......................... 
library(readr)
library(dplyr) 
library(tidyr)
library(stringr) 
library(chron)
library(naniar)
library(ggplot2)
library(ggridges) 

#........................source functions........................
source("utils/clean_ocean_temps.R")
source("utils/plot_ocean_temps.R")
```
:::

## **i.** Write a for loop to **read in** all raw data files

::: {.callout-tip collapse="true"}
## For loop testing tips
It can be easy to lose track of what's happening inside for loops, particularly as they grow in complexity. There are a few helpful things you can do to test out your work:

1.  set `i = 1` (or 2, 3, ...whatever index you'd like to test out) in the console, then run each component of your for loop line-by-line
2.  add `print()` statements or `message()`s throughout your for loop -- not only do these help you track the progress of your for loop as it's running, but they also can help you identify where an error may be occurring in your loop
:::

### **Step 1:**

***The primary goal of step 1 is to get a list of elements (in our case, `.csv` files) to read in and create the skeleton of our for loop for iterating over those files.***

```{r}
#| eval: false
#| echo: true
#| message: false
#| warning: false

# get list of temperature files ----
temp_files <- list.files(path = "data/raw_data", pattern = ".csv") # <1>

# for loop to read in each file ---
for (i in 1:length(temp_files)){ # <2>
  
} # <2>
```
1. get a list of files that you want to iterate over
2. create the skeleton of a for loop to iterative over your list of files

### **Step 2:** 

***The primary goal of step 2 is to create an object name that we'll save our raw data frame to once it's read in using `read_csv()`.***

```{r}
#| eval: false
#| echo: true
#| message: false
#| warning: false

# get list of temperature files ----
temp_files <- list.files(path = "data/raw_data", pattern = ".csv")

# for loop to read in each file ---
for (i in 1:length(temp_files)){
  
  # get object name from file name ----
  file_name <- temp_files[i] # <1>
  message("Reading in: ", file_name) # <2>
  split_name <- stringr::str_split_1(file_name, "_") # <3>
  site_name <- split_name[1] # <4>
  message("Saving as: ", site_name) # <5>
  
}
```
1. get a file from your list of `temp_files` and save it to an object named `file_name` (or something intuitive)
2. print a helpful message so that you know which file your for loop is currently iterating on
3. split apart the file name at "_" using `stringr::str_split_1()` -- this function takes a single string and returns a character vector (e.g. `"alegria_mooring_ale_20210617.csv"` > `"alegria"      "mooring"      "ale"          "20210617.csv"`; `r fontawesome::fa("book-open-reader", fill = "#5A5A5A", a11y = "sem")` I referenced this [resource](https://stringr.tidyverse.org/reference/str_split.html))
4. get the first element of the vector, which is the name of the site (i.e. `"alegria"`); this will become the name of the object that our raw data is saved to 
5. print another helpful message 

### **Step 3:**

***The primary goal of step 3 is to read in the raw data and assign it to the object name we just created.***

```{r}
#| eval: false
#| echo: true
#| message: false
#| warning: false

# get list of temperature files ----
temp_files <- list.files(path = "data/raw_data", pattern = ".csv")

# for loop to read in each file ---
for (i in 1:length(temp_files)){
  
  # get object name from file name ----
  file_name <- temp_files[i]
  message("Reading in: ", file_name)
  split_name <- stringr::str_split_1(file_name, "_")
  site_name <- split_name[1] 
  message("Saving as: ", site_name)
  
  # read in csv and assign to our object name ----
  assign(x = site_name, value = readr::read_csv(here::here("data", "raw_data", file_name))) # <1>
  
}
```
1. assign the data that you're reading in to the object name you created using the `assign()` function, where `x` is the object name and `value` is the value assigned to `x` (`r fontawesome::fa("book-open-reader", fill = "#5A5A5A", a11y = "sem")` I referenced [this resource](https://statisticsglobe.com/r-write-read-multiple-csv-files-for-loop))

## **ii.** Write a for loop to **clean** all data

### **Step 1:** 

***The primary goal of step 1 is to get a list of elements (in our case, raw data frame objects) to iterate over. We'll also create the skeleton of our for loop which will be used to iterate over those data frames.***

```{r}
#| eval: false
#| echo: true
#| message: false
#| warning: false

# get list of dfs to clean ----
raw_dfs <- c("alegria", "mohawk", "carpinteria") # <1>

# for loop to clean dfs using `clean_ocean_temps()` ---- 
for (i in 1:length(raw_dfs)) { # <2>

} # <2>
```
1. create a vector of data frame names that you want to clean
2. create the skeleton of your for loop for iterating over that vector of names

### **Step 2:** 

***The primary goal of step 2 is to create an object name that we'll save our cleaned data frame to once it's processed using `clean_ocean_temps()`.***

```{r}
#| eval: false
#| echo: true
#| message: false
#| warning: false

# get list of dfs to clean ----
raw_dfs <- c("alegria", "mohawk", "carpinteria")

# for loop to clean dfs using `clean_ocean_temps()` ----
for (i in 1:length(raw_dfs)) {
  
  # print message ----
  message("cleaning df", i, ": -------- ", raw_dfs[i], " --------") # <1>
  
  # create new df name to assign clean data to ----
  df_name <- raw_dfs[i] # <2>
  df_clean_name <- paste0(df_name, "_clean") # <3>
  message("New df will be named: ", df_clean_name) # <4>

}
```
1. add a message that lets us know which data frame is currently being processed
2. get a data frame from our list of `raw_dfs` and save it to an object called `df_name` (or something intuitive)
3. build the object name that we'll save our cleaned data frame to -- we want this to be in the format `*_clean`, where `*` is the site name (e.g. `alegria_clean`); we can use the `paste()` function on `df_name` to do this
4. add a helpful message so we can easily keep track of what our for loop is doing

### **Intermediate Step:**

***The primary goal of this intermediate step is to learn how to call objects from the global environment using a matching character string.***

```{r}
#| eval: false
#| echo: true
#| message: false
#| warning: false

# get vector of dfs to clean ----
raw_dfs <- c("alegria", "mohawk", "carpinteria")

# the first element of our vector, `raw_data` (which is a character string) ----
first_df_name <- raw_dfs[1] # <1>

# call an object from environment using `get()`  ----
test <- get(first_df_name) # <2>

# combining the two steps above into one ----
test <- get(raw_dfs[1]) # <3>
```
1. get the first element from our list of `raw_dfs` (i.e. `alegria`)
2. figure out how to call objects from the environment using variable names (`r fontawesome::fa("book-open-reader", fill = "#5A5A5A", a11y = "sem")` I referenced [this resource](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/get))
3. combine both the previous steps into one line of code

### **Step 3:** 

***The primary goal of step 3 is to assign the cleaned data frame to the object name we just created.***

```{r}
#| eval: false
#| echo: true
#| message: false
#| warning: false

# get list of dfs to clean ----
raw_dfs <- c("alegria", "mohawk", "carpinteria")

# for loop to clean dfs using `clean_ocean_temps()` ----
for (i in 1:length(raw_dfs)) {
  
  # print message ----
  message("cleaning df ", i, ": -------- ", raw_dfs[i], " --------")
  
  # create new df name to assign clean data to ----
  df_name <- raw_dfs[i]
  df_clean_name <- paste0(df_name, "_clean")
  message("New df will be named: ", df_clean_name)
  
  # clean data ----
  assign(x = df_clean_name, value = clean_ocean_temps(raw_data = get(raw_dfs[i]), site_name = df_name, include_temps = c("Temp_top", "Temp_bot"))) # <1>
  
  message("------------------------------------")
  
}
```
1. assign the cleaned data frame to the object name, `df_clean_name` (just as we did when we read in data earlier)

## **iii.** Write a for loop to **plot** all data

### **Step 1:**

***The primary goal of step 1 is to get a list of elements (in our case, cleaned data frame objects) to iterate over. We'll also create the skeleton of our for loop which will be used to iterate over those data frames***

```{r}
#| eval: false
#| echo: true
#| message: false
#| warning: false
# get list of dfs to plot ----
clean_dfs <- c("alegria_clean", "mohawk_clean", "carpinteria_clean") # <1>

# for loop to plot dfs using `plot_ocean_temps()` ----
for (i in 1:length(clean_dfs)) { # <2>
  
} # <2>
```
1. create a vector of data frame names that you want to plot
2. create the skeleton of your for loop for iterating over that vector of names

### **Step 2:**

***The primary goal of step 2 is to create an object name that we'll save our plot to once it's created using `plot_ocean_temps()`.***

```{r}
#| eval: false
#| echo: true
#| message: false
#| warning: false
# get list of dfs to plot ----
clean_dfs <- c("alegria_clean", "mohawk_clean", "carpinteria_clean") 

# for loop to plot dfs using `plot_ocean_temps()` -----
for (i in 1:length(clean_dfs)) { 
  
  # print message ----
  message("plotting df ", i, ": -------- ", clean_df[i], " --------") # <1>
  
  # create plot name ----
  clean_df_name <- clean_dfs[i] # <2>
  site_name <- stringr::str_split_1(clean_df_name, "_")[1] # <3>
  plot_name <- paste0(site_name, "_plot") # <4>
  
} 
```
1. add a message that lets us know which data frame is currently being processed
2. get a data frame from our list of `clean_dfs` and save it to an object called `clean_df_name` (or something intuitive)
3. split the data frame name to isolate just the site name portion (e.g. isolate `"alegria"` from `"alegria_clean"`) (**Note:** `stringr::str_split_1` was previously deprecated, but brought back in `{stringr}` v1.5.0 -- you may need to update your package version if you have trouble using this function)
4. build the object name that we'll save our plot to -- we want this to be in the format `*_plot`, where `*` is the site name (e.g. `alegria_plot`); we can use the `paste()` function on `site_name` to do this

### **Step 3:**

***The primary goal of step 3 is to assign the plot to the object name we just created.***

```{r}
#| eval: false
#| echo: true
#| message: false
#| warning: false
# get list of dfs to plot ----
clean_dfs <- c("alegria_clean", "mohawk_clean", "carpinteria_clean") 

# for loop to plot dfs using `plot_ocean_temps()` -----
for (i in 1:length(clean_dfs)) { 
  
  # print message ----
  message("plotting df ", i, ": -------- ", clean_df[i], " --------")
  
  # create plot name ----
  clean_df_name <- clean_dfs[i]
  site_name <- stringr::str_split_1(clean_df_name, "_")[1]
  plot_name <- paste0(site_name, "_plot")
  
  # plot data ----
  assign(x = plot_name, value = plot_ocean_temps(clean_data = get(clean_dfs[i]))) # <1>
  
} 
```
1. assign the plot output to the object name, `plot_name` (just as we did when we read in data earlier)

## **iv.** Putting it all together

Okay, now let's bring all these pieces together! Our revised scripts might look something like this (**Note:** the two function scripts remain unchanged):

::: {.panel-tabset}
## `forloops_pipeline.R`
```{r}
#| eval: false
#| echo: true
#| message: false
#| warning: false

#..........................load packages......................... 
library(readr)
library(dplyr) 
library(tidyr)
library(stringr) 
library(chron)
library(naniar)
library(ggplot2)
library(ggridges) 

#........................source functions........................
source("utils/clean_ocean_temps.R")
source("utils/plot_ocean_temps.R")

#..........................import data...........................
# get list of temp files ----
temp_files <- list.files(path = "data/raw_data", pattern = ".csv")

# for loop to read in each file ----
for (i in 1:length(temp_files)){
  
  # get the object name from the file name ----
  file_name <- temp_files[i]
  message("Reading in: ", file_name)
  split_name <- stringr::str_split_1(file_name, "_")
  site_name <- split_name[1]
  message("Saving to object name: ", site_name)
  
  # read in csv and assign to our object name
  assign(x = site_name, value = readr::read_csv(here::here("data", "raw_data", file_name)))
}

 #...........................clean data...........................
# get list of dfs to clean ----
raw_dfs <- c("alegria", "mohawk", "carpinteria")

# for loop to clean dfs using `clean_ocean_temps()` ----
for (i in 1:length(raw_dfs)) {
  
  # print message ----
  message("cleaning df ", i, ": -------- ", raw_dfs[i], " --------")
  
  # create new df name to assign cleaned data to ----
  df_name <- raw_dfs[i]
  df_clean_name <- paste0(df_name, "_clean")
  message("New df will be named: ", df_clean_name)
  
  # ----
  assign(x = df_clean_name, value = clean_ocean_temps(raw_data = get(raw_dfs[i]), site_name = df_name, include_temps = c("Temp_top", "Temp_bot")))
  
  message("------------------------------------")
}

#............................plot data...........................
# get list of dfs to plot ----
clean_dfs <- c("alegria_clean", "mohawk_clean", "carpinteria_clean") 

# for loop to plot dfs using `plot_ocean_temps()` -----
for (i in 1:length(clean_dfs)) { 
  
  # print message ----
  message("plotting df ", i, ": -------- ", clean_dfs[i], " --------")
  
  # create plot name ----
  clean_df_name <- clean_dfs[i]
  site_name <- stringr::str_split_1(clean_df_name, "_")[1]
  plot_name <- paste0(site_name, "_plot")
  
  # plot data ----
  assign(x = plot_name, value = plot_ocean_temps(clean_data = get(clean_dfs[i])))
  
} 
```

## `utils/clean_ocean_temps.R`

::: {.callout-note}
## Use a roxygen skeleton to document your function
Even if you don't plan to publish your function as part of a package, documenting your work is still a critical part of reproducibility and usability. This may be done in more informal ways, such as code annotations and text explanations in RMarkdown documents, for example. You may also consider more formal documentation -- the [`{roxygen2}`](https://cran.r-project.org/web/packages/roxygen2/vignettes/roxygen2.html) package helps to make that process easier. Click anywhere inside your function, then choose Code > Insert Roxygen Skeleton to get started. 
:::

```{r}
#| eval: false
#| echo: true
#| message: false
#| warning: false
#' Process CTD/ADCP temperature data
#'
#' @param raw_data data frame of CTD/ADCP data collected at SBC LTER site moorings; search for data on the EDI Data Portal (http://portal.edirepository.org:80/nis/simpleSearch?defType=edismax&q=SBC+LTER%5C%3A+Ocean%5C%3A+Currents+and+Biogeochemistry%5C%3A+Moored+CTD+and+ADCP+data&fq=-scope:ecotrends&fq=-scope:lter-landsat*&fl=id,packageid,title,author,organization,pubdate,coordinates&debug=false)
#' @param site_name Santa Barbara Coastal LTER site name as a character string
#' @param include_temps vector of character strings that includes one or more of the following variable names: Temp_top, Temp_mid, Temp_top
#'
#' @return a data frame
#' @export
#'
#' @examples
#' my_clean_df <- clean_ocean_temps(raw_data = my_raw_df, include_temps = c("Temp_bot"))
clean_ocean_temps <- function(raw_data, site_name, include_temps = c("Temp_top", "Temp_mid", "Temp_bot")){ 
  
  # if data contains these colnames, clean the script ----
  if(all(c("year", "month", "day", "decimal_time", "Temp_bot", "Temp_top", "Temp_mid") %in% colnames(raw_data))) { 
    
    message("Cleaning data...") 
    
    # format site name ----
    site_name_formatted <- paste(str_to_title(site_name), "Reef")
    
    # columns to select ----
    standard_cols <- c("year", "month", "day", "decimal_time") 
    all_cols <- append(standard_cols, include_temps) 
    
    # clean data ----
    temps_clean <- raw_data |> 
      select(all_of(all_cols)) |> 
      filter(year %in% c(2005:2020)) |> 
      mutate(site = rep(site_name_formatted)) |> 
      unite(col = date, year, month, day, sep = "-", remove = FALSE) |> 
      mutate(time = times(decimal_time)) |> 
      unite(col = date_time, date, time, sep = " ", remove = TRUE) |> 
      mutate(date_time = as.POSIXct(date_time, "%Y-%m-%d %H:%M:%S", tz = "GMT"),
             year = as.factor(year),
             month = as.factor(month),
             day = as.numeric(day)) |>
      mutate(month_name = as.factor(month.name[month])) |>
      replace_with_na(replace = list(Temp_bot = 9999, Temp_top = 9999, Temp_mid = 9999)) |> 
      select(any_of(c("site", "date_time", "year", "month", "day", "month_name", "Temp_bot", "Temp_mid", "Temp_top")))
    
    # return cleaned df ----
    return(temps_clean) 
    
  } else { 
    
    stop("The data frame provided does not include the necessary columns. Double check your data!") 
    
  }
  
}
```

## `utils/plot_ocean_temps.R`

::: {.callout-note}
## Use a roxygen skeleton to document your function
Even if you don't plan to publish your function as part of a package, documenting your work is still a critical part of reproducibility and usability. This may be done in more informal ways, such as code annotations and text explanations in RMarkdown documents, for example. You may also consider more formal documentation -- the [`{roxygen2}`](https://cran.r-project.org/web/packages/roxygen2/vignettes/roxygen2.html) package helps to make that process easier. Click anywhere inside your function, then choose Code > Insert Roxygen Skeleton to get started. 
:::

```{r}
#| eval: false
#| echo: true
#| message: false
#| warning: false
#' Create ridge line plot of CTD/ADCP bottom temperature data
#'
#' @param clean_data a data frame that has been pre-processed using clean_ocean_temp()
#'
#' @return a plot object
#' @export
#'
#' @examples
#' my_plot <- plot_ocean_temps(clean_data = my_clean_df)
plot_ocean_temps <- function(clean_data) { 
  
  # get site name for plot title ----
  site_name <- unique(clean_data$site)
  
  # plot data ----
  temp_plot <- clean_data |> 
    group_by(month_name) |> 
    ggplot(aes(x = Temp_bot, y = month_name, fill = after_stat(x))) +
    ggridges::geom_density_ridges_gradient(rel_min_height = 0.01, scale = 3) + 
    scale_x_continuous(breaks = c(9, 12, 15, 18, 21)) +
    scale_y_discrete(limits = rev(month.name)) + 
    scale_fill_gradientn(colors = c("#2C5374","#778798", "#ADD8E6", "#EF8080", "#8B3A3A"), name = "Temp. (°C)") +
    labs(x = "Bottom Temperature (°C)",
         title = paste("Bottom Temperatures at ", site_name, ", Santa Barbara, CA", sep = ""), 
         subtitle = "Temperatures (°C) aggregated by month from 2005 - 2022") +
    ggridges::theme_ridges(font_size = 13, grid = TRUE) +
    theme(
      axis.title.y = element_blank()
    )
  
  # return plot ----
  return(temp_plot)
}
```

:::
